{% extends 'skeleton.html.twig' %}

{% block container %}

    <div class="columns is-gapless">
        <div class="column is-12">
            <button class="button is-pulled-right"
                    onclick="return false"
                    @click="saveCharacter('{{ character.id }}')">
                <i class="fa-solid fa-save"></i>&nbsp;Opslaan
            </button>
            &nbsp;
        </div>
    </div>

    {% if persisted %}
        <article class="message is-success">
            <div class="message-header">
                <p>Opgeslagen</p>
            </div>
            <div class="message-body">
                Het karakter is succesvol opgeslagen.
            </div>
        </article>
    {% endif %}

    {% if character.warnings|length > 0 %}
        <article class="message is-warning">
            <div class="message-header">
                <p>Regelsysteem overteding</p>
            </div>
            <div class="message-body">
                {% for warning in character.warnings %}
                    {{ warning }}<br/>
                {% endfor %}
            </div>
        </article>
    {% endif %}

    <article class="message is-dark">
        <div class="message-header">
            {{ character.name }}

            {% if character.name == '' %}
                Character Aanmaken
            {% endif %}
        </div>
        <div class="message-body">
            {% if character.name %}
                <div class="tabs is-toggle is-fullwidth mr-6 ml-4">
                    <ul>
                        <li :class="{ 'is-active': activeTab === 'basic' }">
                            <a @click="activeTab = 'basic'">
                            <span class="icon is-small">
                                <i class="fas fa-receipt" aria-hidden="true"></i>
                            </span>
                                <span>Basis</span>
                            </a>
                        </li>

                        <li :class="{ 'is-active': activeTab === 'skills' }">
                            <a @click="activeTab = 'skills'">
                            <span class="icon is-small">
                                <i class="fas fa-wand-sparkles" aria-hidden="true"></i>
                            </span>
                                <span>Skills</span>
                            </a>
                        </li>

                        <li :class="{ 'is-active': activeTab === 'sheet' }">
                            <a @click="activeTab = 'sheet'">
                            <span class="icon is-small">
                                <i class="fas fa-sheet-plastic" aria-hidden="true"></i>
                            </span>
                                <span>Sheet</span>
                            </a>
                        </li>
                    </ul>
                </div>
            {% endif %}

            <div v-show="activeTab === 'basic'">
                {% include'character_tab_basic.html.twig' %}
            </div>

            {% if character.name %}
                <div v-show="activeTab === 'skills'">
                    {% include'character_tab_skill.html.twig' %}
                </div>

                <div v-show="activeTab === 'sheet'">
                    {% include'character_tab_sheet.html.twig' %}
                </div>
            {% endif %}
        </div>
    </article>

    <script>
        Vue.createApp({
            data() {
                return {
                    activeTab: 'basic',

                    character: {{ character.serialize(false)|json_encode(constant('JSON_PRETTY_PRINT'))|raw }},

                    presentAtEvents: {{ eventsForCharacter.serialize(true)|json_encode(constant('JSON_PRETTY_PRINT'))|raw }},

                    customFieldValues: [
                        {% for customField in customFields.serialize %}
                        '{{ customField.value|escape('js') }}',
                        {% endfor %}
                    ],

                    linkableSkillList: [],
                    skillFilter: '',
                }
            },
            computed: {
                groupedSkills() {
                    const linkableSkills = this.linkableSkillList.filter((skill) => {
                        return skill.skillName.toLowerCase().includes(
                            this.skillFilter.toLowerCase()
                        ) !== false
                    });

                    return this.groupSkills(linkableSkills);
                },

                groupedLinkedSkills() {
                    return this.groupSkills(this.character.linkedSkills);
                },

                linkedSkills: function () {
                    return JSON.stringify(this.character.linkedSkills.map((linkedSkill) => {
                        return {
                            id: linkedSkill.skillId,
                            points: parseFloat(linkedSkill.points),
                            numberOfTimes: parseInt(linkedSkill.numberOfTimes),
                            fastCasting: !!(linkedSkill.fastCasting ?? false),
                            armouredCasting: !!(linkedSkill.armouredCasting ?? false)
                        }
                    }));
                },

                spendablePoints() {
                    return this.totalPoints() - this.spendPoints();
                },
            },
            methods: {
                saveCharacter(characterId) {
                    const characterForm = serializeForm('containerForm');

                    axios
                        .post(`/admin/characters/${characterId}.html`, { character: characterForm })
                        .then(() => {
                            document.location.href = `/admin/characters/persisted/${characterId}.html`
                        })
                        .catch((error) => {
                            const message = error.response.data.error.description;

                            alert(message);
                        });

                    return false;
                },

                printCharacter() {
                    const characterHtml = this.$refs['characterSheet'].innerHTML;

                    axios
                        .post(`/admin/character/print.pdf`, {
                                html: { body: encodeUnicodeBase64(characterHtml) }
                            },
                            { responseType: 'blob' }
                        )
                        .then((response) => {
                            const pdfBinary = new Blob([response.data], { type: 'application/pdf' });
                            const pdfBinaryElement = window.URL.createObjectURL(pdfBinary);

                            const now = new Date();
                            const options = { year: 'numeric', month: '2-digit', day: '2-digit' };
                            const formattedDate = now.toLocaleDateString('nl-NL', options);

                            const downloadLink = document.createElement('a');
                            document.body.appendChild(downloadLink);

                            downloadLink.href = pdfBinaryElement;
                            downloadLink.download = this.character.name + '-' + formattedDate + '.pdf';
                            downloadLink.click();

                            document.body.removeChild(downloadLink);

                            window.URL.revokeObjectURL(url);
                        })
                        .catch((error) => {
                            const message = error.response.data.error.description;

                            alert(message);
                        });
                },

                totalPoints() {
                    let totalPoints = {{ constant('SvenHK\\Maerquin\\Model\\Character::BASE_XP') }};

                    for (const event of this.presentAtEvents) {
                        totalPoints += event.points;
                    }

                    if (totalPoints > {{ constant('SvenHK\\Maerquin\\Model\\Character::MAX_XP') }}) {
                        return {{ constant('SvenHK\\Maerquin\\Model\\Character::MAX_XP') }};
                    }

                    return totalPoints;
                },

                spendPoints() {
                    let spendPoints = 0;

                    for (const linkedSkill of this.character.linkedSkills) {
                        spendPoints += linkedSkill.points * linkedSkill.numberOfTimes;
                    }

                    if (spendPoints > 0) {
                        return spendPoints;
                    }

                    return 0;
                },

                groupSkills(skills) {
                    const groupCollection = {};

                    for (linkedSkill of skills) {
                        const groupName = linkedSkill.skillGroup || 'Ungrouped';

                        if (groupCollection[groupName] === undefined) {
                            groupCollection[groupName] = {
                                skills: [],
                                ordering: linkedSkill.skillGroupOrdering || 999
                            };
                        }

                        groupCollection[groupName].skills.push(linkedSkill);
                    }

                    const sortedGroups = Object.entries(groupCollection)
                        .sort((left, right) => left[1].ordering - right[1].ordering)
                        .reduce((acc, [key, value]) => {
                            acc[key] = value;

                            return acc;
                        }, {});

                    return sortedGroups;
                },

                getSkillName(skillId) {
                    if (!skillId) {
                        return '';
                    }

                    for (linkedSkill of this.linkableSkillList) {
                        if (linkedSkill.skillId === skillId) {
                            return linkedSkill.skillName;
                        }
                    }

                    return skillId;
                },


                numbersOnly(sender, field, allowDot) {
                    const pattern = allowDot ? /[^\.0-9]/g : /[^0-9]/g;

                    sender[field] = sender[field].replace(pattern, '');
                },

                dropdownText(dropdownName) {
                    const dropdownElement = this.$refs[dropdownName];

                    if (
                        dropdownElement &&
                        dropdownElement.options.selectedIndex > -1
                    ) {
                        const options = dropdownElement.options;

                        return options[options.selectedIndex].text.replace('(geen)', '');
                    }

                    return '';
                },

                appendSkill() {
                    axios.get(
                        '/admin/skills/linkable/api?raceId=' + this.character.raceId
                    ).then((response) => {
                        this.linkableSkillList = response.data.data ?? [];

                        openModal(document.getElementById('skillList'));
                    });
                },

                buy(linkableSkill) {
                    const boughtSkill = JSON.parse(JSON.stringify(linkableSkill));

                    boughtSkill.numberOfTimes = 1;
                    boughtSkill.buyableAmount = boughtSkill.maximumAmountBuyable;

                    this.character.linkedSkills.push(boughtSkill);

                    this.character.linkedSkills.sort(
                        (left, right) => left.skillName.localeCompare(right.skillName)
                    );
                },

                deleteSkill(selectedSkill) {
                    if (confirm('Wil je deze skill verwijderen?') === false) {
                        return;
                    }

                    this.character.linkedSkills = this.character.linkedSkills.filter((skill) => {
                        return skill !== selectedSkill;
                    });
                },

                skillBoughtTimes(skillId) {
                    let amount = 0;

                    for (linkedSkill of this.character.linkedSkills) {
                        if (linkedSkill.skillId === skillId) {
                            amount += linkedSkill.numberOfTimes;
                        }
                    }

                    return amount;
                },

                increaseSkillBought(skillLink) {
                    skillLink.numberOfTimes++;
                },

                decreaseSkillBought(skillLink) {
                    skillLink.numberOfTimes--;

                    if (skillLink.numberOfTimes < 1) {
                        skillLink.numberOfTimes = 1;
                    }
                },

                nl2br(input) {
                    return input.replace(/\n/g, '<br />');
                }
            },

            mounted() {
                this.character.linkedSkills.sort(
                    (left, right) => left.skillName.localeCompare(right.skillName)
                );

                axios.get(
                    '/admin/skills/linkable/api?raceId=' + this.character.raceId
                ).then((response) => {
                    this.linkableSkillList = response.data.data ?? [];
                });
            }
        }).mount('.content');
    </script>

{% endblock %}
