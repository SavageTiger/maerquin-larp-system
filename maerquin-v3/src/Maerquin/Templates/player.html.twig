{% extends 'skeleton.html.twig' %}

{% block container %}

    <div class="columns is-gapless">
        <div class="column is-12">
            <button class="button is-pulled-right"><i class="fa-solid fa-save"></i>&nbsp;Opslaan
            </button>
            &nbsp;
        </div>
    </div>
    <div class="spacer is-12"></div>
    <div class="columns is-gapless">
        <div class="column is-12">
            <article class="message is-dark">
                <div class="message-header ">
                    {{ player.name }}
                </div>
                <div class="message-body">

                    <div class="field is-horizontal">
                        <div class="field-label is-normal">
                            <label class="label">Naam</label>
                        </div>
                        <div class="field-body">
                            <div class="field">
                                <div class="control">
                                    <input class="input" name="name" type="text"
                                           value="{{ player.name }}" placeholder=""/>
                                </div>
                            </div>
                        </div>
                    </div>
                    <button class="button is-pulled-right" @click="manageCharacters">
                        <i class="fa-solid fa-person-military-to-person"></i>&nbsp;Aanpassen
                    </button>
                    <div class="field is-horizontal">
                        <div class="field-label is-normal">
                            <label class="label">Characters</label>
                        </div>

                        <div class="field-body">
                            <div class="field card ml-5 mr-5 m-1 p-3">
                                <div v-for="character in coupledCharacters">
                                    <label class="checkbox">
                                        <i class="fa-solid fa-id-badge"></i>
                                        {{ '{{ character.name }}' }}
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </article>
        </div>

        <div class="modal" id="manageCharacters">
            <div class="modal-background"></div>
            <div class="modal-card">
                <header class="modal-card-head">
                    <p class="modal-card-title">Characters</p>
                    <div class="control">
                        <input class="input" type="text" v-model="characterFilter" placeholder="Filter">
                    </div>
                </header>
                <section class="modal-card-body">
                    <div class="checkbox" v-for="character in filteredCharacters">
                        <label class="checkbox">
                            <input type="checkbox"
                                   :disabled="character.playerId !== playerId"
                                   :value="character"
                                   v-model="coupledCharacters"/>
                            {{ '{{ character.name }}' }}
                        </label>
                        <div class="is-pulled-right already-coupled">
                            {{ '{{ (character.playerId && character.playerId !== playerId) ? \'(Gekoppeld)\' : \'\' }}' }}
                        </div>
                    </div>
                </section>
                <footer class="modal-card-foot">
                    <div class="buttons">
                        <button class="button">Sluiten</button>
                    </div>
                </footer>
            </div>
        </div>
    </div>

    <script type="module">
        Vue.createApp({
            data() {
                return {
                    playerId: '{{ player.id }}',
                    characters: [],
                    characterFilter: '',
                    coupledCharacters: [],
                };
            },
            computed: {
                filteredCharacters() {
                    return this.characters.filter((character) => {
                        return character.name.toLowerCase().includes(
                            this.characterFilter.toLowerCase()
                        ) !== false
                    });
                }
            },
            methods: {
                manageCharacters() {
                    axios.get('/admin/characters/api').then((response) => {
                        this.characters = response.data.data ?? [];

                        openModal(document.getElementById('manageCharacters'));
                    });
                },
            },
            mounted() {
                axios.get('/admin/characters/api/for-player/{{ player.id }}').then((response) => {
                    this.coupledCharacters = response.data.data ?? [];
                });
            }
        }).mount('.content');
    </script>
{% endblock %}
