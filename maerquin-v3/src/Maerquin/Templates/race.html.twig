{% extends 'skeleton.html.twig' %}

{% block container %}

    <div class="columns is-gapless">
        <div class="column is-12">
            <button class="button is-pulled-right" @click="saveRace('{{ race.id }}')" onclick="return false;"><i
                        class="fa-solid fa-save"></i>&nbsp;Opslaan
            </button>
            &nbsp;
        </div>
    </div>

    <div class="spacer is-12"></div>

    <div class="columns is-gapless">
        <div class="column is-12">
            <article class="message is-dark">
                <div class="message-header ">
                    {{ race.name }}
                </div>
                <div class="message-body">

                    <form method="POST">
                        <input type="hidden" name="mandatorySkills" v-model="mandatorySkillsFormValue"/>
                        <input type="hidden" name="forbiddenSkills" v-model="forbiddenSkillsFormValue"/>
                        <input type="hidden" name="differentPointSkills" v-model="differentPointSkillsFormValue"/>

                        <div class="field is-horizontal">
                            <div class="field-label is-normal">
                                <label class="label">Naam</label>
                            </div>
                            <div class="field-body">
                                <div class="field">
                                    <div class="control">
                                        <input class="input" name="name" type="text"
                                               value="{{ race.name }}" placeholder=""/>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </form>

                    <div class="columns">
                        <div class="column">
                            <button class="button is-pulled-right mt-5" @click="manageSkills('Mandatory')"
                                    onclick="return false;">
                                <i class="fa-solid fa-asterisk"></i>&nbsp;Aanpassen
                            </button>

                            <h2>Verplichte skills</h2>

                            <div class="box inner-box is-shadowless">
                                <table class="table is-bordered is-striped is-fullwidth">
                                    <tr v-for="skillConnection in mandatorySkills" :key="skillConnection.id">
                                        <td>
                                            {{ '{{ skillConnection.skillName }}' }}
                                        </td>
                                    </tr>
                                </table>
                            </div>

                        </div>

                        <div class="column">
                            <button class="button is-pulled-right mt-5" @click="manageSkills('Forbidden')"
                                    onclick="return false;">
                                <i class="fa-solid fa-ban"></i>&nbsp;Aanpassen
                            </button>

                            <h2>Verboden skills</h2>

                            <div class="box inner-box is-shadowless">
                                <table class="table is-bordered is-striped is-fullwidth">
                                    <tr v-for="skillConnection in forbiddenSkills" :key="skillConnection.id">
                                        <td>
                                            {{ '{{ skillConnection.skillName }}' }}
                                        </td>
                                    </tr>
                                </table>
                            </div>
                        </div>
                    </div>

                    <button class="button is-pulled-right mt-4" onclick="return false;"
                            @click="manageSkills('DifferentPoint')">
                        <i class="fa-solid fa-arrow-up-1-9"></i>&nbsp;Aanpassen
                    </button>

                    <h2>Afwijkende kosten (punten) voor ras</h2>


                    <div class="box inner-box is-shadowless">
                        <table class="table is-bordered is-striped is-fullwidth">
                            <tr v-for="skillConnection in differentPointSkills" :key="skillConnection.id">
                                <td>
                                    {{ '{{ skillConnection.skillName }}' }}
                                </td>
                                <td style="width: 20%">
                                    <input class="input" name="points[]" type="text"
                                           v-model="skillConnection.customPoints"
                                           placeholder=""/>
                                </td>
                            </tr>
                        </table>
                    </div>
                </div>

            </article>
        </div>
    </div>

    <div class="modal" id="manageSkillsMandatory">
        <div class="modal-background"></div>
        <div class="modal-card">
            <header class="modal-card-head">
                <p class="modal-card-title">Verplichte skills</p>
                <div class="control">
                    <input class="input" type="text" v-model="skillsSearch" placeholder="Filter">
                </div>
            </header>
            <section class="modal-card-body">
                <div class="checkbox" v-for="skill in allSkillsFiltered">
                    <label class="checkbox">
                        <input type="checkbox"
                               @change="changeSkillConnection('mandatorySkill', { 'skillId': skill.id, 'skillName': skill.name })"
                               :checked="isSkillConnectionSelected('mandatorySkill', skill.id)"
                        />
                        {{ '{{ skill.name }}' }}
                    </label>
                </div>
            </section>
            <footer class="modal-card-foot">
                <div class="buttons">
                    <button class="button">Sluiten</button>
                </div>
            </footer>
        </div>
    </div>

    <div class="modal" id="manageSkillsForbidden">
        <div class="modal-background"></div>
        <div class="modal-card">
            <header class="modal-card-head">
                <p class="modal-card-title">Verboden skills</p>
                <div class="control">
                    <input class="input" type="text" v-model="skillsSearch" placeholder="Filter">
                </div>
            </header>
            <section class="modal-card-body">
                <div class="checkbox" v-for="skill in allSkillsFiltered">
                    <label class="checkbox">
                        <input type="checkbox"
                               @change="changeSkillConnection('forbiddenSkill', { 'skillId': skill.id, 'skillName': skill.name })"
                               :checked="isSkillConnectionSelected('forbiddenSkill', skill.id)"
                        />
                        {{ '{{ skill.name }}' }}
                    </label>
                </div>
            </section>
            <footer class="modal-card-foot">
                <div class="buttons">
                    <button class="button">Sluiten</button>
                </div>
            </footer>
        </div>
    </div>

    <div class="modal" id="manageSkillsDifferentPoint">
        <div class="modal-background"></div>
        <div class="modal-card">
            <header class="modal-card-head">
                <p class="modal-card-title">Afwijkende kosten skills</p>
                <div class="control">
                    <input class="input" type="text" v-model="skillsSearch" placeholder="Filter">
                </div>
            </header>
            <section class="modal-card-body">
                <div class="checkbox" v-for="skill in allSkillsFiltered">
                    <label class="checkbox">
                        <input type="checkbox"
                               @change="changeSkillConnection('differentPointSkill', { 'skillId': skill.id, 'skillName': skill.name })"
                               :checked="isSkillConnectionSelected('differentPointSkill', skill.id)"
                        />
                        {{ '{{ skill.name }}' }}
                    </label>
                </div>
            </section>
            <footer class="modal-card-foot">
                <div class="buttons">
                    <button class="button">Sluiten</button>
                </div>
            </footer>
        </div>
    </div>

    <script>
        const differentPointSkillsShadow = {};

        Vue.createApp({
            data() {
                return {
                    skillsSearch: '',
                    allSkillsSorted: [],

                    mandatorySkills: {{ mandatorySkills.serialize(true)|json_encode(constant('JSON_PRETTY_PRINT'))|raw }},
                    forbiddenSkills: {{ forbiddenSkills.serialize(true)|json_encode(constant('JSON_PRETTY_PRINT'))|raw }},
                    differentPointSkills: {{ differentPointSkills.serialize(true)|json_encode(constant('JSON_PRETTY_PRINT'))|raw }},
                }
            },
            computed: {
                allSkillsFiltered() {
                    return this.allSkillsSorted.filter((skill) => {
                        return skill.name.toLowerCase().includes(
                            this.skillsSearch.toLowerCase()
                        );
                    });
                },

                mandatorySkillsFormValue() {
                    return JSON.stringify({
                        skillIds: this.mandatorySkills.map((skillConnection) => skillConnection.skillId)
                    });
                },

                forbiddenSkillsFormValue() {
                    return JSON.stringify({
                        skillIds: this.forbiddenSkills.map((skillConnection) => skillConnection.skillId)
                    })

                },

                differentPointSkillsFormValue() {
                    return JSON.stringify({
                        skillIds: this.differentPointSkills.map((skillConnection) => skillConnection.skillId),
                        points: this.differentPointSkills.map((skillConnection) => parseInt(skillConnection.customPoints))
                    })
                },

            },
            methods: {
                saveRace(raceId) {
                    const raceForm = serializeForm('containerForm');

                    axios
                        .post(`/admin/races/${raceId}.html`, { race: raceForm })
                        .then(() => {
                            document.location.href = '/admin/races.html'
                        })
                        .catch((error) => {
                            const message = error.response.data.error.description;

                            alert(message);
                        });

                    return false;
                },

                manageSkills(windowName) {
                    axios.get('/admin/skills/api').then((response) => {
                        this.allSkillsSorted = response.data.data ?? [];

                        this.skillsSearch = '';

                        openModal(document.getElementById('manageSkills' + windowName));
                    });
                },

                changeSkillConnection(skillType, value) {
                    const hasSkillConnection = this.isSkillConnectionSelected(skillType, value.skillId);

                    let skillConnections = [];

                    switch (skillType) {
                        case 'mandatorySkill':
                            skillConnections = this.mandatorySkills;
                            break;

                        case 'forbiddenSkill':
                            skillConnections = this.forbiddenSkills;
                            break;

                        case 'differentPointSkill':
                            skillConnections = this.differentPointSkills;

                            break;
                    }

                    if (hasSkillConnection) {
                        let index = 0;

                        for (const skillConnection of skillConnections) {
                            if (skillConnection.skillId === value.skillId) {
                                if (skillType === 'differentPointSkill') {
                                    differentPointSkillsShadow[value.skillId] = skillConnection.customPoints;
                                }

                                skillConnections = skillConnections.splice(index, 1);

                                return;
                            }

                            index++;
                        }

                        return;
                    }

                    if (skillType === 'differentPointSkill') {
                        value.customPoints = differentPointSkillsShadow[value.skillId] ?? 0;
                    }


                    skillConnections.push(value);
                },

                isSkillConnectionSelected(skillType, skillId) {
                    let skillConnections = [];

                    switch (skillType) {
                        case 'mandatorySkill':
                            skillConnections = this.mandatorySkills;
                            break;

                        case 'forbiddenSkill':
                            skillConnections = this.forbiddenSkills;
                            break;

                        case 'differentPointSkill':
                            skillConnections = this.differentPointSkills;
                            break;
                    }

                    for (const skillConnection of skillConnections) {
                        if (skillConnection.skillId === skillId) {
                            return true;
                        }
                    }

                    return false;
                }
            },
            mounted() {
                for (const differentPointSkill of this.differentPointSkills) {
                    differentPointSkillsShadow[differentPointSkill.skillId] = differentPointSkill.customPoints;
                }
            }
        }).mount('.content');
    </script>

{% endblock %}
