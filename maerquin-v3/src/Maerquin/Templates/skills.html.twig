{% extends 'skeleton.html.twig' %}

{% block container %}

    <div class="columns is-gapless">
        <div class="column is-12 is-gapless">
            <div class="field is-pulled-right has-addons">
                &nbsp;
                <div class="control">
                    <input class="input" type="text" v-model="search" placeholder="Zoeken">
                </div>
            </div>
            <button class="button is-pulled-right"><i class="fa-solid fa-hand-sparkles"></i>&nbsp;Nieuwe aanmaken
            </button>
        </div>
    </div>

    <span v-for="skillGroup in skillGroups">
        <span v-if="filteredSkills(skillGroup.name).length">
            <h1 class="title is-2">{{ '{{ skillGroup.name }}' }}</h1>
            <div class="grid">
                <div @click="navigateToSkill(skill.id)"
                     class="cell is-clickable py-3 px-3 skill-cell has-radius-normal"
                     v-for="skill in filteredSkills(skillGroup.name)">
                    <a href="#">
                        {{ '{{ skill.name }}' }}

                        <span v-if="skill.deityName" class="skill-addon">
                            {{ '{{ skill.deityName }}' }}
                        </span>

                        <span v-if="skill.elementName" class="skill-addon">
                            {{ '{{ skill.elementName }}' }}
                        </span>
                    </a>
                </div>
            </div>
            <div>&nbsp;</div>
        </span>
    </span>

    <script>
        Vue.createApp({
            data() {
                return {
                    search: '',
                    skills: {{ skills|json_encode|raw }},
                    skillGroups: []
                }

            },
            computed: {},
            methods: {
                filteredSkills(skillGroup) {
                    return this.skills.filter(
                        (skill) =>
                            (
                                skill.name.toLowerCase().includes(this.search.toLowerCase()) ||
                                skill.deityName.toLowerCase().includes(this.search.toLowerCase()) ||
                                skill.elementName.toLowerCase().includes(this.search.toLowerCase())
                            ) &&
                            skill.typeName === skillGroup
                    );
                },


                navigateToSkill(skillId) {
                    document.location.href = `/admin/skills/${skillId}.html`;
                }
            },
            mounted() {
                const skillGroups = [];

                for (const skill of this.skills) {
                    if (skillGroups.indexOf(skill.typeName) === -1) {
                        skillGroups.push(skill.typeName);
                    }
                }
                this.skillGroups = skillGroups.map((skillGroup) => {
                    return { name: skillGroup }
                });
            }
        }).mount('.content');
    </script>

{% endblock %}
